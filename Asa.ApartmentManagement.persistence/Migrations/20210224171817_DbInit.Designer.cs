// <auto-generated />
using System;
using Asa.ApartmentManagement.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Asa.ApartmentManagement.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210224171817_DbInit")]
    partial class DbInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Asa.ApartmentManagement.Core.BaseInfo.Domain.ApartmentInfo", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("BuidingId")
                        .HasColumnType("int");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("ApartmentId");

                    b.HasIndex("BuildingId");

                    b.ToTable("Apartment");
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.BaseInfo.Domain.BuildingInfo", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApartmentCount")
                        .HasColumnType("int");

                    b.Property<string>("BuildingName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BuildingId");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.BaseInfo.Domain.ExpensCategory", b =>
                {
                    b.Property<int>("ExpensCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExpensCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormulaType")
                        .HasColumnType("int");

                    b.HasKey("ExpensCategoryId");

                    b.ToTable("ExpensCategory");
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.BaseInfo.Domain.ExpenseInfo", b =>
                {
                    b.Property<int>("ExpensId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ExpensCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("ExpensId");

                    b.HasIndex("ExpensCategoryId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.BaseInfo.Domain.OwnerTenant", b =>
                {
                    b.Property<int>("OwnerTenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<int?>("OccupantCount")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("OwnerTenantId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("PersonId");

                    b.ToTable("OwnerTenant");
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.BaseInfo.Domain.PersonInfo", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.ChargeCalculation.Apartment", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Area")
                        .HasColumnName("Apartment_Area")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("BuildingId")
                        .HasColumnName("Apartment_BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnName("Apartment_Number")
                        .HasColumnType("int");

                    b.HasKey("ApartmentId");

                    b.HasIndex("BuildingId");

                    b.ToTable("Apartment");
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.ChargeCalculation.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("BuildingId");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.ChargeCalculation.Charge", b =>
                {
                    b.Property<int>("ChargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CalculateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("ChargeId");

                    b.HasIndex("ApartmentId");

                    b.ToTable("Charge");
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.ChargeCalculation.ChargeItem", b =>
                {
                    b.Property<int>("ChargeItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ChargeId")
                        .HasColumnType("int");

                    b.Property<int?>("ChargeId1")
                        .HasColumnType("int");

                    b.Property<int>("ExpensId")
                        .HasColumnType("int");

                    b.Property<int>("PayerId")
                        .HasColumnType("int");

                    b.HasKey("ChargeItemId");

                    b.HasIndex("ChargeId");

                    b.HasIndex("ChargeId1");

                    b.HasIndex("ExpensId");

                    b.HasIndex("PayerId");

                    b.ToTable("ChargeItem");
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.ChargeCalculation.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnName("Expense_Amount")
                        .HasColumnType("int");

                    b.Property<int>("FormulaType")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnName("Expense_From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("To")
                        .HasColumnName("Expense_To")
                        .HasColumnType("datetime2");

                    b.HasKey("ExpenseId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.ChargeCalculation.Payer", b =>
                {
                    b.Property<int>("PayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<int>("OccupantCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("PayerId");

                    b.HasIndex("ApartmentId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.BaseInfo.Domain.ApartmentInfo", b =>
                {
                    b.HasOne("Asa.ApartmentManagement.Core.ChargeCalculation.Apartment", null)
                        .WithOne()
                        .HasForeignKey("Asa.ApartmentManagement.Core.BaseInfo.Domain.ApartmentInfo", "ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asa.ApartmentManagement.Core.BaseInfo.Domain.BuildingInfo", "Building")
                        .WithMany("Apartments")
                        .HasForeignKey("BuildingId");
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.BaseInfo.Domain.BuildingInfo", b =>
                {
                    b.HasOne("Asa.ApartmentManagement.Core.ChargeCalculation.Building", null)
                        .WithOne()
                        .HasForeignKey("Asa.ApartmentManagement.Core.BaseInfo.Domain.BuildingInfo", "BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.BaseInfo.Domain.ExpenseInfo", b =>
                {
                    b.HasOne("Asa.ApartmentManagement.Core.BaseInfo.Domain.ExpensCategory", "ExpensCategory")
                        .WithMany()
                        .HasForeignKey("ExpensCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asa.ApartmentManagement.Core.ChargeCalculation.Expense", null)
                        .WithOne()
                        .HasForeignKey("Asa.ApartmentManagement.Core.BaseInfo.Domain.ExpenseInfo", "ExpensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.BaseInfo.Domain.OwnerTenant", b =>
                {
                    b.HasOne("Asa.ApartmentManagement.Core.BaseInfo.Domain.ApartmentInfo", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asa.ApartmentManagement.Core.BaseInfo.Domain.PersonInfo", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.BaseInfo.Domain.PersonInfo", b =>
                {
                    b.HasOne("Asa.ApartmentManagement.Core.ChargeCalculation.Payer", null)
                        .WithOne()
                        .HasForeignKey("Asa.ApartmentManagement.Core.BaseInfo.Domain.PersonInfo", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.ChargeCalculation.Apartment", b =>
                {
                    b.HasOne("Asa.ApartmentManagement.Core.ChargeCalculation.Building", "Building")
                        .WithMany("Apartments")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.ChargeCalculation.Charge", b =>
                {
                    b.HasOne("Asa.ApartmentManagement.Core.ChargeCalculation.Apartment", null)
                        .WithMany()
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.ChargeCalculation.ChargeItem", b =>
                {
                    b.HasOne("Asa.ApartmentManagement.Core.ChargeCalculation.Charge", null)
                        .WithMany()
                        .HasForeignKey("ChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asa.ApartmentManagement.Core.ChargeCalculation.Charge", null)
                        .WithMany("Items")
                        .HasForeignKey("ChargeId1");

                    b.HasOne("Asa.ApartmentManagement.Core.ChargeCalculation.Expense", null)
                        .WithMany()
                        .HasForeignKey("ExpensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asa.ApartmentManagement.Core.ChargeCalculation.Payer", null)
                        .WithMany()
                        .HasForeignKey("PayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asa.ApartmentManagement.Core.ChargeCalculation.Payer", b =>
                {
                    b.HasOne("Asa.ApartmentManagement.Core.ChargeCalculation.Apartment", null)
                        .WithMany("Payers")
                        .HasForeignKey("ApartmentId");
                });
#pragma warning restore 612, 618
        }
    }
}
